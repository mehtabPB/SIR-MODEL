/*The SIR (Susceptible-Infected-Recovered) model is a widely-used mathematical framework for understanding and predicting the spread of infectious diseases within a population.
It divides the population into three distinct groups:

Susceptible (S): Individuals who can contract the disease.
Infected (I): Individuals currently infected and capable of transmitting the disease.
Recovered (R): Individuals who have recovered from the disease and are no longer susceptible or infectious.*/


import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns 
from scipy.integrate import odeint 

# Define the SIR model differential equations
def sir_model(SIR, t, beta, gamma): 
    S, I, R = SIR 
    dS_dt = -beta * S * I 
    dI_dt = beta * S * I - gamma * I 
    dR_dt = gamma * I 
    return [dS_dt, dI_dt, dR_dt] 

# Simulate the SIR model
def simulate_sir(beta, gamma, S0, I0, R0, t): 
    SIR0 = [S0, I0, R0] 
    result = odeint(sir_model, SIR0, t, args=(beta, gamma)) 
    return result 

# Parameters
S0 = 0.99  
I0 = 0.01  
R0 = 0.0   
beta = 0.35  
gamma = 0.1  
t = np.linspace(0, 160, 160)  

# Simulate the SIR model
result = simulate_sir(beta, gamma, S0, I0, R0, t) 
S, I, R = result[:, 0], result[:, 1], result[:, 2] 

# Plotting the results
sns.set(style='darkgrid') 
plt.figure(figsize=(10, 6)) 
plt.plot(t, S, label="Susceptible", color='blue') 
plt.plot(t, I, label="Infected", color='red') 
plt.plot(t, R, label="Recovered", color='green') 
plt.title("SIR Model Simulation of Epidemic Spread") 
plt.xlabel("Days") 
plt.ylabel("Population Proportion") 
plt.legend(loc='best') 
plt.show()
